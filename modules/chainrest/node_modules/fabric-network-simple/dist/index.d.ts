import { TransientMap, Contract } from "fabric-network";
export interface config {
    channelName: string;
    contractName: string;
    connectionProfile: {
        name: string;
        version: string;
        channels: {
            [channelName: string]: {
                orderers: string[];
                peers: string[];
            };
        };
        organizations: {
            [orgName: string]: {
                mspid: string;
                peers: string[];
                certificateAuthorities: string[];
            };
        };
        orderers: {
            [ordererName: string]: {
                url: string;
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
            };
        };
        peers: {
            [peerName: string]: {
                url: string;
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
            };
        };
    };
    identity: {
        mspid: string;
        certificate: string;
        privateKey: string;
    };
    settings: {
        enableDiscovery: boolean;
        asLocalhost: boolean;
    };
}
interface queryChaincodeResponse {
    queryResult: string;
}
interface invokeChaincodeResponse {
    invokeResult: string;
}
export default class fabricNetworkSimple {
    contract: Contract;
    constructor(config: config);
    initGateway(config: config): Promise<void>;
    queryChaincode(transaction: string, args: string[]): Promise<queryChaincodeResponse | undefined>;
    invokeChaincode(transaction: string, args: string[], transient?: TransientMap): Promise<invokeChaincodeResponse | undefined>;
}
export {};
