#
#Copyright Odin Solutions S.L. All Rights Reserved.
#
#SPDX-License-Identifier: Apache-2.0
#

version: '3.1'

services:
  pepproxy:
    build: .
    image: odins/pep-proxy:pythonv1.0
    container_name: pepproxy
    hostname: pepproxy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
        - "${PEP_EXPOSED_PORT}:1027"
    restart: always
    volumes:
        #- ./certs/fullchain.pem:/opt/PEP-Proxy/certs/server-public-cert.pem  # volumes to import certificates to container
        #- ./certs/privkey.pem:/opt/PEP-Proxy/certs/server-priv-rsa.pem
        - ./certs/server-public-cert.pem:/opt/PEP-Proxy/certs/server-public-cert.pem  # volumes to import certificates to container
        - ./certs/server-priv-rsa.pem:/opt/PEP-Proxy/certs/server-priv-rsa.pem
        - ./pepproxy.log:/opt/PEP-Proxy/out.log
        - /home/alexariasj/OneDrive/Fluidos/idm-fluidos-aries-framework-go/test/bdd/fixtures/keys/tls/ec-pubCert.pem:/etc/ssl/certs/ec-pubCert.pem
    environment:
        - pep_protocol=${PEP_PROTOCOL}

        - pep_authtoken_type=${PEP_AUTHTOKEN_TYPE}

        - node_verifier_protocol=${NODE_VERIFIER_PROTOCOL}
        - node_verifier_host=${NODE_VERIFIER_HOST}
        - node_verifier_port=${NODE_VERIFIER_PORT}
        - node_verifier_API=${NODE_VERIFIER_API}
        - node_verifier_post_verifycredential=${NODE_VERIFIER_POST_VERIFYCREDENTIAL}
        - node_verifier_post_verifyjwtcontent=${NODE_VERIFIER_POST_VERIFYJWTCONTENT}

        #Validate Signature of JWT: Admitted values: "0: No use; 1:Use"
        - node_jwt_validatesignature=${NODE_JWT_VALIDATESIGNATURE}
        - node_jwt_algorithms=${NODE_JWT_ALGORITHMS}

        - target_protocol=${PEP_TARGET_PROTOCOL}
        - target_host=${PEP_TARGET_HOST}
        - target_port=${PEP_TARGET_PORT}
        - target_API=${PEP_TARGET_API}

        - target2_protocol=${PEP_TARGET2_PROTOCOL}
        - target2_host=${PEP_TARGET2_HOST}
        - target2_port=${PEP_TARGET2_PORT}
        - target2_API=${PEP_TARGET2_API}
        - target2_thingdescription=${PEP_TARGET2_THINGDESCRIPTION}

        #Validate Capability token using blockchain: Admitted values: "0: No use; 1:Use"
        - blockchain_usevalidation=${PEP_BLOCKCHAIN_USEVALIDATION}

        # Optional: Default value : NativeAPI
        # NativeAPI -> Uses native API of Blockchain integration (defined in the first integration)
        # NGSIv2 -> Uses API of NGSIv2
        # NGSI-LD -> Uses API of NGSI-LD
        - blockchain_api=${PEP_BLOCKCHAIN_API}

        #BlockChain protocol. Admitted values: "http","https"
        - blockchain_protocol=${PEP_BLOCKCHAIN_PROTOCOL}
        - blockchain_host=${PEP_BLOCKCHAIN_HOST}
        - blockchain_port=${PEP_BLOCKCHAIN_PORT}

        #blockchain_get_token=/token to blockchain_api=NativeAPI
        #blockchain_get_token=/chain/events?entityid= or /v2/entities/ or /ngsi-ld/vi/entities/ to blockchain_api=NGSIv2 or NGSI-LD
        - blockchain_get_token=${PEP_BLOCKCHAIN_GET_TOKEN} # Optional : Default value : /token

        # PEP proxy endpoint: protocol+ip+port
        # HOST NO admitted: 0.0.0.0, localhost, 127.0.0.1
        - PEP_ENDPOINT=${PEP_ENDPOINT}

        # PEPPROXY_CORS_ENABLED:
        # 1 --> if you need to add CORS headers and the component hidden by the PEP-Proxy are not ready to support CORS headers.
        # 0 --> if you don't need to add CORS headers or the component hidden by the PEP-Proxy supports CORS headers.
        - PEPPROXY_CORS_ENABLED=${PEP_CORS_ENABLED}

